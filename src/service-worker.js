// src/service-worker.js

import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { BackgroundSyncPlugin } from 'workbox-background-sync';

// Precache assets generated by the build process.
precacheAndRoute(self.__WB_MANIFEST);

// Handle skipWaiting and clientsClaim
self.addEventListener('install', (event) => {
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  clients.claim();
});

// Caching strategies and background sync...

// Example: Cache API GET requests to /users
registerRoute(
  ({ url }) => url.origin === 'http://localhost:5000' && url.pathname.startsWith('/users'),
  new NetworkFirst({
    cacheName: 'api-users-cache',
  })
);

// Background sync for POST requests
const bgSyncPlugin = new BackgroundSyncPlugin('post-queue', {
  maxRetentionTime: 24 * 60, // Retry for max of 24 hours
});

registerRoute(
  ({ url, request }) =>
    request.method === 'POST' &&
    url.origin === 'http://localhost:5000' &&
    url.pathname.startsWith('/users'),
  new NetworkFirst({
    cacheName: 'post-requests',
    plugins: [bgSyncPlugin],
  }),
  'POST'
);

// Handle push notifications
self.addEventListener('push', (event) => {
  const data = event.data.json();
  const options = {
    body: data.body,
    icon: '/icons/icon-192x192.png',
    badge: '/icons/icon-192x192.png',
  };
  event.waitUntil(self.registration.showNotification(data.title, options));
});
